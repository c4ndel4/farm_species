<?php

/**
 * @file
 * farmOS farm_species module.
 */

use Drupal\Core\Config\FileStorage;


/**
 * Creates a field from configuration in the sync directory.
 *
 * For fields the method used in kankernl_custom_read_config_from_sync() does
 * not work properly.
 *
 * @param string $entityTypeId
 *   The ID of the entity type the field should be created for.
 * @param string[] $bundles
 *   An array of IDs of the bundles the field should be added to.
 * @param string $field
 *   The name of the field to add.
 * @see https://blokspeed.net/2019/creating-fields-and-other-configuration-during-updates-drupal
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function farm_species_create_field_from_sync($entityTypeId, array $bundles, $field) {
  // Statically cache storage objects.
  static $fileStorage;

  // Create the file storage to read from.
  if (empty($fileStorage)) {
    global $config_directories;
    $fileStorage = new FileStorage($config_directories[CONFIG_SYNC_DIRECTORY]);
  }

  /** @var \Drupal\Core\Entity\EntityStorageInterface $fieldConfigStorage */
  $fieldStorage = \Drupal::service('entity_type.manager')
    ->getStorage('field_storage_config');

  // If the storage does not yet exit, create it first.
  if (empty($fieldStorage->load("$entityTypeId.$field"))) {
    $fieldStorage
      ->createFromStorageRecord($fileStorage->read("field.storage.$entityTypeId.$field"))
      ->save();
  }

  /** @var \Drupal\Core\Entity\EntityStorageInterface $fieldConfigStorage */
  $fieldConfigStorage = \Drupal::service('entity_type.manager')
    ->getStorage('field_config');

  // Create the field instances.
  foreach ($bundles as $bundleId) {
    $config = $fieldConfigStorage->load("$entityTypeId.$bundleId.$field");
    if (empty($config)) {
      $fieldConfigStorage->create($fileStorage->read("field.field.$entityTypeId.$bundleId.$field"))
        ->save();
    }
  }
}

/**
 * Synchronize a configuration entity.
 * 
 * Don't use this to create a new field, use 
 * my_custom_module_create_field_from_sync().
 *
 * @param string $id
 *   The config ID.
 *
 * @see https://blokspeed.net/2019/creating-fields-and-other-configuration-during-updates-drupal
 */
function farm_species_read_config_from_sync($id) {
  // Statically cache storage objects.
  static $fileStorage, $activeStorage;

  if (empty($fileStorage)) {
    global $config_directories;
    $fileStorage = new FileStorage($config_directories[CONFIG_SYNC_DIRECTORY]);
  }
  if (empty($activeStorage)) {
    $activeStorage = \Drupal::service('config.storage');
  }

  $config_data = $fileStorage->read($id);
  $activeStorage->write($id, $config_data);
}

/**
 * Implements hook_install().
 */
function farm_species_install () {
  
  \Drupal::configFactory()->getEditable('core.entity_form_display.taxonomy_term.animal_type.default')->delete();
  \Drupal::configFactory()->getEditable('core.entity_form_display.taxonomy_term.material_type.default')->delete();
  \Drupal::configFactory()->getEditable('core.entity_form_display.taxonomy_term.plant_type.default')->delete();
  \Drupal::configFactory()->getEditable('core.entity_view_display.taxonomy_term.animal_type.default')->delete();
  \Drupal::configFactory()->getEditable('core.entity_view_display.taxonomy_term.material_type.default')->delete();
  \Drupal::configFactory()->getEditable('core.entity_view_display.taxonomy_term.plant_type.default')->delete();
  
  $config_path = config_get_config_directory(CONFIG_SYNC_DIRECTORY);
  $config_manager = Drupal::service('config.manager');
  $source = new FileStorage($config_path);

  // Obtain the storage manager for vocabularies
  // Create a new vocabulary from the yaml configuration and save
  \Drupal::entityManager()->getStorage('taxonomy_vocabulary')
    ->create($source->read('taxonomy.vocabulary.species'))
    ->save();


  farm_species_create_field_from_sync('taxonomy', ['species'], 'scientific_name');

  farm_species_create_field_from_sync('taxonomy', ['plant_type', 'animal_type', 'material_type'], 'species');
  farm_species_create_field_from_sync('taxonomy', ['species', 'animal_type', 'material_type'], 'image');

  farm_species_read_config_from_sync('core.entity_form_display.taxonomy_term.animal_type.default');
  farm_species_read_config_from_sync('core.entity_form_display.taxonomy_term.material_type.default');
  farm_species_read_config_from_sync('core.entity_form_display.taxonomy_term.plant_type.default');
  farm_species_read_config_from_sync('core.entity_form_display.taxonomy_term.species.default');
  farm_species_read_config_from_sync('core.entity_view_display.taxonomy_term.animal_type.default');
  farm_species_read_config_from_sync('core.entity_view_display.taxonomy_term.material_type.default');
  farm_species_read_config_from_sync('core.entity_view_display.taxonomy_term.plant_type.default');
  farm_species_read_config_from_sync('core.entity_view_display.taxonomy_term.species.default');

}